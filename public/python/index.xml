<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python :: Second Brain - Cheat Sheets and other utilites</title>
    <link>http://localhost:1313/python/index.html</link>
    <description>This is a python repository.</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 18 Sep 2025 14:29:43 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basics</title>
      <link>http://localhost:1313/python/1---basics/index.html</link>
      <pubDate>Thu, 18 Sep 2025 14:28:19 +0100</pubDate>
      <guid>http://localhost:1313/python/1---basics/index.html</guid>
      <description>Basic Python functions len() - function returns the length of a string, list, tuple, or dictionary. type() - function returns the type of a variable. Strings String slicing string[start:end] - slices a string from index start to end. The end index is exclusive. string[start:end:step] - slices a string from index start to end with a step of step (the step can have a negative value). String methods string.lower() - converts all characters in the string to lowercase. string.upper() - converts all characters in the string to uppercase. string.capitalize() - capitalizes the first character of the string. string.title() - capitalizes the first character of each word in the string. string.strip() - removes leading and trailing whitespace from the string. string.lstrip() - removes leading whitespace from the string. string.rstrip() - removes trailing whitespace from the string. string.replace(old, new) - replaces occurrences of old substring with new substring. string.split(delimiter) - splits the string into a list of substrings based on the specified delimiter. String functions string.startswith(substring) - checks if the string starts with the specified substring. Returns True or False. string.endswith(substring) - checks if the string ends with the specified substring. Returns True or False. string.find(substring) - returns the lowest index of the substring if found in the string. Returns -1 if not found. string.index(substring) - returns the lowest index of the substring if found in the string. Raises a ValueError if not found. string.count(substring) - returns the number of occurrences of the substring in the string. Type casting float_num = 10.5 int_num = int(float_num) # Converts float to int, truncating the decimal part print(int_num) # Output: 10 print(type(int_num)) # Output: &lt;class &#39;int&#39;&gt; str_num = str(int_num) # Converts int to string print(str_num) # Output: &#39;10&#39; print(type(str_num)) # Output: &lt;class &#39;str&#39;&gt; Logical operators and or &amp; - logical AND operator. Returns True if both operands are true. or or |- logical OR operator. Returns True if at least one operand is true. not or ! - logical NOT operator. Returns True if the operand is false. Conditional statements if a &gt; b: print(&#34;a is greater than b&#34;) elif a &lt; b: print(&#34;a is less than b&#34;) else: print(&#34;a is equal to b&#34;) Loops For loop A for loop is used to iterate over a sequence (like a list, tuple, dictionary, set, or string - basically any iterable object).</description>
    </item>
    <item>
      <title>Data_strucutures</title>
      <link>http://localhost:1313/python/2---data_strucutures/index.html</link>
      <pubDate>Thu, 18 Sep 2025 14:29:43 +0100</pubDate>
      <guid>http://localhost:1313/python/2---data_strucutures/index.html</guid>
      <description>Lists - &#34;[ ]&#34; A list is a mutable collection which is ordered and changeable. Allows duplicate members. It can store items of different data types.&#xA;fruits = [&#34;apple&#34;, &#34;banana&#34;, &#34;cherry&#34;] print(fruits[0]) # First element: Output: apple print(fruits[-1]) # Last element: Output: cherry fruits.append(&#34;orange&#34;) # Adds orange to the end of the list print(fruits) # Output: [&#39;apple&#39;, &#39;banana&#39;, &#39;cherry&#39;, &#39;orange&#39;] fruits.remove(&#34;banana&#34;) # Removes banana from the list print(fruits) # Output: [&#39;apple&#39;, &#39;cherry&#39;, &#39;orange&#39;] fruits.insert(1, &#34;kiwi&#34;) # Inserts kiwi at index 1 print(fruits) # Output: [&#39;apple&#39;, &#39;kiwi&#39;, &#39;cherry&#39;, &#39;orange&#39;] fruit[0]=&#34;mango&#34; # Changes the first element to mango print(fruits) # Output: [&#39;mango&#39;, &#39;kiwi&#39;, &#39;cherry&#39;, &#39;orange&#39;] popped = fruits.pop() # Removes the last element (or you can specify an index) # The removed element can be stored in a variable print(fruits) # Output: [&#39;mango&#39;, &#39;kiwi&#39;, &#39;cherry&#39;] print(popped) # Output: orange fruits.sort() # Sorts the list in ascending order print(fruits) # Output: [&#39;cherry&#39;, &#39;kiwi&#39;, &#39;mango&#39;] fruits.reverse() # Reverses the order of the list print(fruits) # Output: [&#39;mango&#39;, &#39;kiwi&#39;, &#39;cherry&#39;] fruits.append(&#34;kiwi&#34;) # Adds another kiwi to the end of the list print(fruits.count(&#34;kiwi&#34;)) # Counts occurrences of kiwi: Output: 2 fruits.remove(&#34;kiwi&#34;) # Removes the first occurrence of kiwi # (you can also use del fruits[1] to remove by index) print(fruits) # Output: [&#39;mango&#39;, &#39;cherry&#39;, &#39;kiwi&#39;] fruits.extend([&#34;grape&#34;, &#34;melon&#34;]) # Adds multiple items to the end of the list print(fruits) # Output: [&#39;mango&#39;, &#39;cherry&#39;, &#39;kiwi&#39;, &#39;grape&#39;, &#39;melon&#39;] You can slice a list (or any other iterable) just like a string:</description>
    </item>
    <item>
      <title>Basics - to remove</title>
      <link>http://localhost:1313/python/basics_test/index.html</link>
      <pubDate>Thu, 18 Sep 2025 14:23:35 +0100</pubDate>
      <guid>http://localhost:1313/python/basics_test/index.html</guid>
      <description>Basics Basic Python functions len() - function returns the length of a string, list, tuple, or dictionary. type() - function returns the type of a variable. Strings String slicing string[start:end] - slices a string from index start to end. The end index is exclusive. string[start:end:step] - slices a string from index start to end with a step of step (the step can have a negative value). String methods string.lower() - converts all characters in the string to lowercase. string.upper() - converts all characters in the string to uppercase. string.capitalize() - capitalizes the first character of the string. string.title() - capitalizes the first character of each word in the string. string.strip() - removes leading and trailing whitespace from the string. string.lstrip() - removes leading whitespace from the string. string.rstrip() - removes trailing whitespace from the string. string.replace(old, new) - replaces occurrences of old substring with new substring. string.split(delimiter) - splits the string into a list of substrings based on the specified delimiter. String functions string.startswith(substring) - checks if the string starts with the specified substring. Returns True or False. string.endswith(substring) - checks if the string ends with the specified substring. Returns True or False. string.find(substring) - returns the lowest index of the substring if found in the string. Returns -1 if not found. string.index(substring) - returns the lowest index of the substring if found in the string. Raises a ValueError if not found. string.count(substring) - returns the number of occurrences of the substring in the string. Type casting float_num = 10.5 int_num = int(float_num) # Converts float to int, truncating the decimal part print(int_num) # Output: 10 print(type(int_num)) # Output: &lt;class &#39;int&#39;&gt; str_num = str(int_num) # Converts int to string print(str_num) # Output: &#39;10&#39; print(type(str_num)) # Output: &lt;class &#39;str&#39;&gt; Logical operators and or &amp; - logical AND operator. Returns True if both operands are true. or or |- logical OR operator. Returns True if at least one operand is true. not or ! - logical NOT operator. Returns True if the operand is false. Conditional statements if a &gt; b: print(&#34;a is greater than b&#34;) elif a &lt; b: print(&#34;a is less than b&#34;) else: print(&#34;a is equal to b&#34;) Loops For loop A for loop is used to iterate over a sequence (like a list, tuple, dictionary, set, or string - basically any iterable object).</description>
    </item>
  </channel>
</rss>